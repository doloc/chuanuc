package com.hkl.chuanuc.entity;
// Generated Aug 25, 2019 6:12:29 PM by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "shopify", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
public class User implements java.io.Serializable {

	private UserId id;
	private Rank rank;
	private String email;
	private String password;
	private String salt;
	private String username;
	private byte role;
	private long totalDebt;
	private Date created;
	private Date updated;
	private Set<Order> ordersForCreator = new HashSet<Order>(0);
	private Set<Order> ordersForCustomerId = new HashSet<Order>(0);
	private Set<Address> addresses = new HashSet<Address>(0);

	public User() {
	}

	public User(UserId id, Rank rank, String email, String password, String salt, String username, byte role,
			long totalDebt, Date created, Date updated) {
		this.id = id;
		this.rank = rank;
		this.email = email;
		this.password = password;
		this.salt = salt;
		this.username = username;
		this.role = role;
		this.totalDebt = totalDebt;
		this.created = created;
		this.updated = updated;
	}

	public User(UserId id, Rank rank, String email, String password, String salt, String username, byte role,
			long totalDebt, Date created, Date updated, Set<Order> ordersForCreator, Set<Order> ordersForCustomerId,
			Set<Address> addresses) {
		this.id = id;
		this.rank = rank;
		this.email = email;
		this.password = password;
		this.salt = salt;
		this.username = username;
		this.role = role;
		this.totalDebt = totalDebt;
		this.created = created;
		this.updated = updated;
		this.ordersForCreator = ordersForCreator;
		this.ordersForCustomerId = ordersForCustomerId;
		this.addresses = addresses;
	}

	@EmbeddedId

	@AttributeOverrides({ @AttributeOverride(name = "id", column = @Column(name = "id", nullable = false)),
			@AttributeOverride(name = "rankId", column = @Column(name = "rank_id", nullable = false)) })
	public UserId getId() {
		return this.id;
	}

	public void setId(UserId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "rank_id", nullable = false, insertable = false, updatable = false)
	public Rank getRank() {
		return this.rank;
	}

	public void setRank(Rank rank) {
		this.rank = rank;
	}

	@Column(name = "email", unique = true, nullable = false, length = 45)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password", nullable = false, length = 32)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "salt", nullable = false, length = 16)
	public String getSalt() {
		return this.salt;
	}

	public void setSalt(String salt) {
		this.salt = salt;
	}

	@Column(name = "username", nullable = false, length = 45)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "role", nullable = false)
	public byte getRole() {
		return this.role;
	}

	public void setRole(byte role) {
		this.role = role;
	}

	@Column(name = "total_debt", nullable = false)
	public long getTotalDebt() {
		return this.totalDebt;
	}

	public void setTotalDebt(long totalDebt) {
		this.totalDebt = totalDebt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 19)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCreator")
	public Set<Order> getOrdersForCreator() {
		return this.ordersForCreator;
	}

	public void setOrdersForCreator(Set<Order> ordersForCreator) {
		this.ordersForCreator = ordersForCreator;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByCustomerId")
	public Set<Order> getOrdersForCustomerId() {
		return this.ordersForCustomerId;
	}

	public void setOrdersForCustomerId(Set<Order> ordersForCustomerId) {
		this.ordersForCustomerId = ordersForCustomerId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

}
